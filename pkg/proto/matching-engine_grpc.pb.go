// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/proto/matching-engine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Engine_Process_FullMethodName       = "/tcb.matching_engine.Engine/Process"
	Engine_ProcessMarket_FullMethodName = "/tcb.matching_engine.Engine/ProcessMarket"
	Engine_Cancel_FullMethodName        = "/tcb.matching_engine.Engine/Cancel"
	Engine_FetchBook_FullMethodName     = "/tcb.matching_engine.Engine/FetchBook"
)

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineClient interface {
	Process(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OutputOrders, error)
	ProcessMarket(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OutputOrders, error)
	Cancel(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	FetchBook(ctx context.Context, in *BookInput, opts ...grpc.CallOption) (*BookOutput, error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Process(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OutputOrders, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutputOrders)
	err := c.cc.Invoke(ctx, Engine_Process_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ProcessMarket(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OutputOrders, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutputOrders)
	err := c.cc.Invoke(ctx, Engine_ProcessMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Cancel(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, Engine_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) FetchBook(ctx context.Context, in *BookInput, opts ...grpc.CallOption) (*BookOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookOutput)
	err := c.cc.Invoke(ctx, Engine_FetchBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
// All implementations must embed UnimplementedEngineServer
// for forward compatibility.
type EngineServer interface {
	Process(context.Context, *Order) (*OutputOrders, error)
	ProcessMarket(context.Context, *Order) (*OutputOrders, error)
	Cancel(context.Context, *Order) (*Order, error)
	FetchBook(context.Context, *BookInput) (*BookOutput, error)
	mustEmbedUnimplementedEngineServer()
}

// UnimplementedEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngineServer struct{}

func (UnimplementedEngineServer) Process(context.Context, *Order) (*OutputOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedEngineServer) ProcessMarket(context.Context, *Order) (*OutputOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMarket not implemented")
}
func (UnimplementedEngineServer) Cancel(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedEngineServer) FetchBook(context.Context, *BookInput) (*BookOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBook not implemented")
}
func (UnimplementedEngineServer) mustEmbedUnimplementedEngineServer() {}
func (UnimplementedEngineServer) testEmbeddedByValue()                {}

// UnsafeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServer will
// result in compilation errors.
type UnsafeEngineServer interface {
	mustEmbedUnimplementedEngineServer()
}

func RegisterEngineServer(s grpc.ServiceRegistrar, srv EngineServer) {
	// If the following call pancis, it indicates UnimplementedEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Engine_ServiceDesc, srv)
}

func _Engine_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Process(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ProcessMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ProcessMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_ProcessMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ProcessMarket(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Cancel(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_FetchBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).FetchBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_FetchBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).FetchBook(ctx, req.(*BookInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Engine_ServiceDesc is the grpc.ServiceDesc for Engine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Engine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcb.matching_engine.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Engine_Process_Handler,
		},
		{
			MethodName: "ProcessMarket",
			Handler:    _Engine_ProcessMarket_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Engine_Cancel_Handler,
		},
		{
			MethodName: "FetchBook",
			Handler:    _Engine_FetchBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/matching-engine.proto",
}
